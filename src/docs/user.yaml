paths:
  /api/v1/user/profile-data:
    get:
      summary: Get profile data
      tags: [User Profile]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Profile data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  status_code:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: Profile data retrieved
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 22229083-5f5a-4a11-mn34-jksahd1234
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: john.doe@example.com
                      phone_number:
                        type: string
                        example: +6284231111333
                      profile_picture_url:
                        type: string
                        example: https://ayyieaqvvurjnfoxvlzt.supabase.co/storage/v1/object/public/profile-pictures/59ca9083-5f5a-8888-ab3d-63aa48c10696_23482cf6-2222-40fb-ad10-jasdhjkasdhuw12.png
                      resume_url:
                        type: string
                        example: https://ayyieaqvvurjnfoxvlzt.supabase.co/storage/v1/object/public/resumes/59ca9083-5f5a-9ab2-ac7d-63aa48c10696_215ae0fd-f27f-45ce-9999-njcasu13w2134.pdf
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  status_code:
                    type: number
                    example: 401
                  message:
                    type: string
                    example: Unauthorized access

  # UPDATE PROFILE DATA
  /api/v1/user/update-profile-data:
    put:
      summary: Update user profile data
      description: Update user profile information (name, email, phone number)
      tags:
        - User Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: User's full name
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "john.doe@example.com"
                phone_number:
                  type: string
                  description: User's phone number
                  example: "+628123456789"
              minProperties: 1
              additionalProperties: false
      responses:
        "200":
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                    example: success
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User profile updated successfully
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "John Doe"
                      email:
                        type: string
                        format: email
                        example: "john.doe@example.com"
                      phone_number:
                        type: string
                        example: "+628123456789"
        "400":
          description: Bad Request - No data provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                    example: error
                  status_code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Please fill data
        "404":
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                    example: error
                  status_code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: User not found
        "500":
          description: Error updating profile data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                    example: error
                  status_code:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Error updating profile user data

  # UPDATE PASSWORD
  /api/v1/user/update-password:
    put:
      summary: Update user password
      description: Change user password by providing current password and new password
      tags:
        - User Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - current_password
                - new_password
              properties:
                current_password:
                  type: string
                  format: password
                  description: User's current password for verification
                  example: "currentPassword123"
                  minLength: 1
                new_password:
                  type: string
                  format: password
                  description: New password to be set
                  example: "newPassword456"
                  minLength: 8
              additionalProperties: false
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                    example: success
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Password changed successfully
                  data:
                    type: null
                    nullable: true
                    example: null
        "401":
          description: Unauthorized - Current password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                    example: error
                  status_code:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: Current password is incorrect
        "404":
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                    example: error
                  status_code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: User not found
        "500":
          description: Error updating password
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                    example: error
                  status_code:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Error updating password

  # UPDATE PROFILE PICTURE
  /api/v1/user/profile-picture:
    put:
      summary: Update user profile picture
      description: Upload and update user profile picture with file validation
      tags:
        - User Profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Profile picture file (JPEG, PNG, JPG, GIF)
            encoding:
              file:
                contentType: image/*
      responses:
        "200":
          description: Profile picture updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                    example: success
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Profile picture updated successfully
                  data:
                    type: object
                    properties:
                      profile_picture_url:
                        type: string
                        format: uri
                        description: Public URL of the uploaded profile picture
                        example: "https://your-supabase-url.supabase.co/storage/v1/object/public/profile-pictures/123_uuid-string.jpg"
        "400":
          description: Bad Request - File validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                    example: error
                  status_code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    enum:
                      - "No file uploaded"
                      - "File type not allowed. Please upload an image (JPEG, PNG, JPG, GIF)"
                      - "File size too large. Maximum size allowed is 1MB"
                    example: "File size too large. Maximum size allowed is 1MB"
        "404":
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                    example: error
                  status_code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: User not found
        "500":
          description: Error updating profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                    example: error
                  status_code:
                    type: integer
                    example: 500
                  message:
                    type: string
                    enum:
                      - "Error uploading file"
                      - "Error updating profile picture"
                    example: Error updating profile picture

    # DELETE PROFILE PICTURE
    delete:
      summary: Delete user profile picture
      description: Remove user profile picture from storage and database
      tags:
        - User Profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Profile picture deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                    example: success
                  status_code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Profile picture deleted successfully
                  data:
                    type: object
                    properties:
                      profile_picture_url:
                        type: null
                        nullable: true
                        description: Profile picture URL after deletion (will be null)
                        example: null
        "404":
          description: Not Found - User or profile picture not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                    example: error
                  status_code:
                    type: integer
                    example: 404
                  message:
                    type: string
                    enum:
                      - "User not found"
                      - "No profile picture found for this user"
                    example: "No profile picture found for this user"
        "500":
          description: Error deleting profile picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [success, error]
                    example: error
                  status_code:
                    type: integer
                    example: 500
                  message:
                    type: string
                    enum:
                      - "Error deleting profile picture file"
                      - "Error updating user data"
                      - "Server error"
                    example: "Error deleting profile picture file"
